后台socket.io使用: io.sockets.emit() 向所有客户端广播。

1. 前台直接GET到BGM播放
  BGM URL: /bgm.mp3

2. 后台程序区分玩家A和玩家B，只能打开一个web页面作为观看。

3. BGM各个时刻需要做的手势图案都是提前设计好的，前台直接GET得到如下类型的json，然后在前台生成滚动条进行展示。
  URL: /gesture.json

[{
  index: 0, //编号为0
  time: "01:02:300",// 在歌曲播放1分2秒300毫秒的时候需要做出1号手势
  type: 1
},
{
  index: 1,
  time: "01:03:000",
  type: 2
},
{
  index: 2,
  time: "04:02:100",
  type: 3
}]

  "123456……"对应的手势都是规定好的，是什么都无所谓，只是做展示而已。

4. 游戏开始前有一个准备界面，所有资源读取好后，点击“Play”开始游戏。
  这时候前台向后台发送 "play" 事件，后台会广播"play"事件，当前台再次收到play事件时，开始游戏。

  (这是为了，无论在哪个web页面点击开始，所有web页面都同时开始游戏)

  后台注册事件：play 无参数
  前台注册事件：play 无参数


5. 后台会在每一个需要做的手势的时间 前后100ms 以内用websocket发送数据给前台，告诉前台A或B玩家是否做对这个手势。

  前台注册事件： result
  参数： io.sockets.emit('result', 'A', 0, true) //代表 A玩家第0编号的手势成功（true）做出
        io.sockets.emit('result', 'B', 3, false) ////代表 B玩家第3编号的手势失败（false）

6. 前台计算AB玩家的手势是否通过，每连续通过10个手势就像对方发一个攻击特效，对方掉一点血。
  当一个人的血为空的时候，游戏结束，停止监听后台发来的数据，显示胜利画面。
  向后台发送"stop"事件，代表游戏结束。

  后台注册事件：stop 无参数

  判断是否攻击、判断血量、攻击、判断是否游戏结束，这些事情都是前台负责，后台都是不知道的，当前台向后台发送stop之后，后台才会停止运作。

7. 停止运作之后，刷新页面可以重新开始新的一局。不过还是同样的BGM，同样的手势要求。

8. 后台和leap motion程序的结合，我单独和大神沟通。只需要大神把接口写好即可。
